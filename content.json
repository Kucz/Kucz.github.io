{"meta":{"title":"Literary World","subtitle":"谁不会休息，谁就不会工作。——列宁","description":"Whoever does not rest will not work.","author":"曹震","url":"http://yoursite.com"},"pages":[{"title":"About","date":"2016-04-20T20:48:33.000Z","updated":"2018-07-10T05:42:11.499Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"自我介绍####"},{"title":"Tags","date":"2018-07-10T02:25:25.313Z","updated":"2018-07-10T02:25:25.313Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"MVVM and RAC","slug":"MVVM-and-RAC","date":"2018-07-10T05:46:58.000Z","updated":"2018-07-10T05:58:44.816Z","comments":false,"path":"2018/07/10/MVVM-and-RAC/","link":"","permalink":"http://yoursite.com/2018/07/10/MVVM-and-RAC/","excerpt":"","text":"MVVM模式与RAC MVVM 是 MVC 模式的一种演进，它主要解决了 ViewController 过于臃肿带来的不易维护和测试的问题。其中 ViewModel 的主要职 责是处理业务逻辑并提供 View 所需的数据，这样 VC 就不用关心业务，自然也就瘦了下来。ViewModel 只关心业务数据不关心 View，所以不会与 View 产生耦合，也就更方便进行单元测试。 View 是一个壳，它所呈现的内容都需要由 ViewModel 来提供，而 View 又不与 ViewModel 直接沟通，这时就需要 ViewController 来做中间的协调者。ViewController 持有 View 和 ViewModel，当 VC 初始化时，会让 ViewModel 去取数据，简单来说就是调用 VM 的某个获取数据的方法。 使用 MVVM 最舒服的姿势是搭配 ReactiveCocoa。不过它的问题在于学习成本和维护成本比较高，在小团队中或许还可以尝试，当开发人员数量较多时就很难推起来了。这也是我们今天要讲的主题：如何不借助 ReactiveCocoa 来实现 MVVM。 先从数据的获取开始说起吧。在 ReactiveCocoa 里有一个类叫「RACCommand」，它的主要作用是执行某个会改变数据的操作，然后提供获取数据的方法，跟我们想要达到的目的很像，所以可以借鉴这个思路，写一个简单的 Command。","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://yoursite.com/tags/iOS/"}]}]}